{"seeAlsoSections":[{"title":"Exported (NIOCore)","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoop","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoopGroup","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBufferAllocator","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/TimeAmount"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:7NIOCore15EventLoopFutureC","modules":[{"name":"SotoCore"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}]},"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"sections":[],"identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoopFuture","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoCore"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoopFuture\/eventLoop"]}],"variants":[{"paths":["\/documentation\/sotocore\/eventloopfuture"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions that promise to do work asynchronously can return an "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The recipient of such an object can then observe it to be notified when the operation completes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The provider of a "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" can create and return a placeholder object"},{"type":"text","text":" "},{"type":"text","text":"before the actual result is available. For example:"}]},{"type":"codeListing","syntax":null,"code":["func getNetworkData(args) -> EventLoopFuture<NetworkResponse> {","    let promise = eventLoop.makePromise(of: NetworkResponse.self)","    queue.async {","        . . . do some work . . .","        promise.succeed(response)","        . . . if it fails, instead . . .","        promise.fail(error)","    }","    return promise.futureResult","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this function returns immediately; the promise object will be given a value"},{"type":"text","text":" "},{"type":"text","text":"later on. This behaviour is common to Future\/Promise implementations in many programming"},{"type":"text","text":" "},{"type":"text","text":"languages. If you are unfamiliar with this kind of object, the following resources may be"},{"type":"text","text":" "},{"type":"text","text":"helpful:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you receive a "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" from another function, you have a number of options:"},{"type":"text","text":" "},{"type":"text","text":"The most common operation is to use "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"map()"},{"type":"text","text":" to add a function that will be called"},{"type":"text","text":" "},{"type":"text","text":"with the eventual result.  Both methods returns a new "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" immediately"},{"type":"text","text":" "},{"type":"text","text":"that will receive the return value from your function, but they behave differently. If you have"},{"type":"text","text":" "},{"type":"text","text":"a function that can return synchronously, the "},{"type":"codeVoice","code":"map"},{"type":"text","text":" function will transform the result of type"},{"type":"text","text":" "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" to a the new result of type "},{"type":"codeVoice","code":"NewValue"},{"type":"text","text":" and return an "},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["let networkData = getNetworkData(args)","","\/\/ When network data is received, convert it.","let processedResult: EventLoopFuture<Processed> = networkData.map { (n: NetworkResponse) -> Processed in","    ... parse network data ....","    return processedResult","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If however you need to do more asynchronous processing, you can call "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":". The return value of the"},{"type":"text","text":" "},{"type":"text","text":"function passed to "},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":" must be a new "},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"type":"text","text":" object: the return value of "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"type":"text","text":" that will contain the eventual result of both the original operation and"},{"type":"text","text":" "},{"type":"text","text":"the subsequent one."}]},{"type":"codeListing","syntax":null,"code":["\/\/ When converted network data is available, begin the database operation.","let databaseResult: EventLoopFuture<DBResult> = processedResult.flatMap { (p: Processed) -> EventLoopFuture<DBResult> in","    return someDatabaseOperation(p)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In essence, future chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" provide a form of data-driven asynchronous programming"},{"type":"text","text":" "},{"type":"text","text":"that allows you to dynamically declare data dependencies for your various operations."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" chains created via "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" are sufficient for most purposes. All of the registered"},{"type":"text","text":" "},{"type":"text","text":"functions will eventually run in order. If one of those functions throws an error, that error will"},{"type":"text","text":" "},{"type":"text","text":"bypass the remaining functions. You can use "},{"type":"codeVoice","code":"flatMapError()"},{"type":"text","text":" to handle and optionally recover from"},{"type":"text","text":" "},{"type":"text","text":"errors in the middle of a chain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At the end of an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" chain, you can use "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"whenFailure()"},{"type":"text","text":" to add an"},{"type":"text","text":" "},{"type":"text","text":"observer callback that will be invoked with the result or error at that point. (Note: If you ever"},{"type":"text","text":" "},{"type":"text","text":"find yourself invoking "},{"type":"codeVoice","code":"promise.succeed()"},{"type":"text","text":" from inside a "},{"type":"codeVoice","code":"whenSuccess()"},{"type":"text","text":" callback, you probably should"},{"type":"text","text":" "},{"type":"text","text":"use "},{"type":"codeVoice","code":"flatMap()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"cascade(to:)"},{"type":"text","text":" instead.)"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" objects are typically obtained by:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":".flatMap()"},{"type":"text","text":" on an existing future to create a new future for the next step in a series of operations."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializing an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that already has a value or an error"}]}]}]},{"anchor":"Threading-and-Futures","level":3,"type":"heading","text":"Threading and Futures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the major performance advantages of NIO over something like Node.js or Python’s asyncio is that NIO will"},{"type":"text","text":" "},{"type":"text","text":"by default run multiple event loops at once, on different threads. As most network protocols do not require"},{"type":"text","text":" "},{"type":"text","text":"blocking operation, at least in their low level implementations, this provides enormous speedups on machines"},{"type":"text","text":" "},{"type":"text","text":"with many cores such as most modern servers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it can present a challenge at higher levels of abstraction when coordination between those threads"},{"type":"text","text":" "},{"type":"text","text":"becomes necessary. This is usually the case whenever the events on one connection (that is, one "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":") depend"},{"type":"text","text":" "},{"type":"text","text":"on events on another one. As these "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s may be scheduled on different event loops (and so different threads)"},{"type":"text","text":" "},{"type":"text","text":"care needs to be taken to ensure that communication between the two loops is done in a thread-safe manner that"},{"type":"text","text":" "},{"type":"text","text":"avoids concurrent mutation of shared state from multiple loops at once."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main primitives NIO provides for this use are the "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" and "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". As their names"},{"type":"text","text":" "},{"type":"text","text":"suggest, these two objects are aware of event loops, and so can help manage the safety and correctness of your"},{"type":"text","text":" "},{"type":"text","text":"programs. However, understanding the exact semantics of these objects is critical to ensuring the safety of your code."}]},{"anchor":"Callbacks","level":4,"type":"heading","text":"Callbacks"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most important principle of the "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" and "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" is this: all callbacks registered on"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will execute on the thread corresponding to the event loop that created the "},{"type":"codeVoice","code":"Future"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"regardless"}]},{"type":"text","text":" of what thread succeeds or fails the corresponding "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that if "},{"type":"emphasis","inlineContent":[{"type":"text","text":"your code"}]},{"type":"text","text":" created the "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":", you can be extremely confident of what thread the"},{"type":"text","text":" "},{"type":"text","text":"callback will execute on: after all, you held the event loop in hand when you created the "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, if your code is handed an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" or "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":", and you want to register callbacks"},{"type":"text","text":" "},{"type":"text","text":"on those objects, you cannot be confident that those callbacks will execute on the same "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" that your"},{"type":"text","text":" "},{"type":"text","text":"code does."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This presents a problem: how do you ensure thread-safety when registering callbacks on an arbitrary"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"? The short answer is that when you are holding an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":", you can always obtain a"},{"type":"text","text":" "},{"type":"text","text":"new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" whose callbacks will execute on your event loop. You do this by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture.hop(to:)"},{"type":"text","text":". This function returns a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" whose callbacks are guaranteed"},{"type":"text","text":" "},{"type":"text","text":"to fire on the provided event loop. As an added bonus, "},{"type":"codeVoice","code":"hopTo"},{"type":"text","text":" will check whether the provided "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" "},{"type":"text","text":"was already scheduled to dispatch on the event loop in question, and avoid doing any work if that was the case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that for any "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that your code did not create itself (via"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopPromise.futureResult"},{"type":"text","text":"), use of "},{"type":"codeVoice","code":"hopTo"},{"type":"text","text":" is "},{"type":"strong","inlineContent":[{"type":"text","text":"strongly encouraged"}]},{"type":"text","text":" to help guarantee thread-safety. It"},{"type":"text","text":" "},{"type":"text","text":"should only be elided when thread-safety is provably not needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The “thread affinity” of "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"s is critical to writing safe, performant concurrent code without"},{"type":"text","text":" "},{"type":"text","text":"boilerplate. It allows you to avoid needing to write or use locks in your own code, instead using the natural"},{"type":"text","text":" "},{"type":"text","text":"synchronization of the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" to manage your thread-safety. In general, if any of your "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" callbacks need to invoke a lock (either directly or in the form of "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":") this"},{"type":"text","text":" "},{"type":"text","text":"should be considered a code smell worth investigating: the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"-based synchronization guarantees of"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" should be sufficient to guarantee thread-safety."}]}]}],"references":{"doc://codes.soto.soto-core/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP"},"doc://codes.soto.soto-core/documentation/SotoCore/EventLoopFuture":{"role":"symbol","title":"EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoopFuture","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"url":"\/documentation\/sotocore\/eventloopfuture"},"doc://codes.soto.soto-core/documentation/SotoCore":{"role":"collection","title":"SotoCore","abstract":[{"type":"text","text":"The core framework for Soto, a Swift SDK for AWS"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore","kind":"symbol","type":"topic","url":"\/documentation\/sotocore"},"doc://codes.soto.soto-core/documentation/SotoCore/EventLoopGroup":{"role":"symbol","title":"EventLoopGroup","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoopGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"url":"\/documentation\/sotocore\/eventloopgroup"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/TimeAmount":{"role":"symbol","title":"TimeAmount","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"abstract":[{"type":"text","text":"Represents a time "},{"type":"emphasis","inlineContent":[{"type":"text","text":"interval"}]},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/TimeAmount","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"url":"\/documentation\/sotosignerv4\/timeamount"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"role":"symbol","title":"ByteBuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/sotosignerv4\/bytebuffer"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/codes.soto.soto-core\/SQ"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises":{"title":"Javascript","titleInlineContent":[{"type":"text","text":"Javascript"}],"type":"link","identifier":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises","url":"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Using_promises"},"doc://codes.soto.soto-core/documentation/SotoCore/EventLoop":{"role":"symbol","title":"EventLoop","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoop"}],"abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoop","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EventLoop"}],"url":"\/documentation\/sotocore\/eventloop"},"doc://codes.soto.soto-core/documentation/SotoCore/EventLoopFuture/eventLoop":{"role":"symbol","title":"eventLoop","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" which is tied to the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" and is used to notify all registered callbacks."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/EventLoopFuture\/eventLoop","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/eventloopfuture\/eventloop"},"https://docs.google.com/document/d/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M/edit":{"title":"Python","titleInlineContent":[{"type":"text","text":"Python"}],"type":"link","identifier":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit","url":"https:\/\/docs.google.com\/document\/d\/10WOZgLQaYNpOrag-eTbUm-JUCCfdyfravZ4qSOQPg1M\/edit"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBufferAllocator":{"role":"symbol","title":"ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBufferAllocator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"url":"\/documentation\/sotosignerv4\/bytebufferallocator"},"http://docs.scala-lang.org/overviews/core/futures.html":{"title":"Scala","titleInlineContent":[{"type":"text","text":"Scala"}],"type":"link","identifier":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html","url":"http:\/\/docs.scala-lang.org\/overviews\/core\/futures.html"}}}