{"seeAlsoSections":[{"title":"Exported (NIOCore)","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBufferAllocator","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/TimeAmount"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:7NIOCore10ByteBufferV","modules":[{"name":"SotoSignerV4"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"sections":[],"identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoCore"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writerIndex"]},{"title":"Instance Methods","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/asyncSequence(chunkSize:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"]}],"variants":[{"paths":["\/documentation\/sotocore\/bytebuffer"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"Allocation","level":3,"type":"heading","text":"Allocation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"allocator.buffer(capacity: desiredCapacity)"},{"type":"text","text":" to allocate a new "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},{"anchor":"Supported-types","level":3,"type":"heading","text":"Supported types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". Using Swift’s "},{"type":"codeVoice","code":"extension"},{"type":"text","text":" mechanism you can easily"},{"type":"text","text":" "},{"type":"text","text":"create "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" support for your own data types. Out of the box, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" supports for example the following"},{"type":"text","text":" "},{"type":"text","text":"types (non-exhaustive list):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"StaticString"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s various (unsigned) integer types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Foundation"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[UInt8]"},{"type":"text","text":" and generally any "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" of "},{"type":"codeVoice","code":"UInt8"}]}]}]},{"anchor":"Random-Access","level":3,"type":"heading","text":"Random Access"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for random access:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"get<Type>(at: Int, length: Int)"},{"type":"text","text":" where "},{"type":"codeVoice","code":"<type>"},{"type":"text","text":" is for example "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" (for "},{"type":"codeVoice","code":"[UInt8]"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"set<Type>(at: Int)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"type":"codeVoice","code":"set"},{"type":"text","text":" request."}]},{"anchor":"Sequential-Access","level":3,"type":"heading","text":"Sequential Access"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" provides two properties which are indices into the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to support sequential access:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":", the index of the next readable byte"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":", the index of the next byte to write"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for sequential access:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"type":"text","text":" to read "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes from the current "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" (and then advance the reader"},{"type":"text","text":" "},{"type":"text","text":"index by "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"type":"text","text":" to write, advancing the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" by the appropriate amount"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"]},{"anchor":"Layout","level":3,"type":"heading","text":"Layout"},{"type":"codeListing","syntax":null,"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"type":"text","text":" "},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"type":"codeVoice","code":"read<Type>"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"write<Type>"},{"type":"text","text":"). Getting "},{"type":"codeVoice","code":"writableBytes"},{"type":"text","text":" (bytes beyond the writer index) is undefined"},{"type":"text","text":" "},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"0"},{"type":"text","text":" initialised)."}]},{"anchor":"Slicing","level":3,"type":"heading","text":"Slicing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" supports slicing a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" without copying the underlying storage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"]},{"anchor":"Notes","level":3,"type":"heading","text":"Notes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the ‘readable bytes’."}]}]}],"references":{"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/capacity":{"role":"symbol","title":"capacity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"capacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":", this is not constant and does "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" signify the number"},{"type":"text","text":" "},{"type":"text","text":"of bytes that have been written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/capacity","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/capacity"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"role":"symbol","title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"This vends a pointer of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" at the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" after ensuring that the buffer has at least "},{"type":"codeVoice","code":"minimumWritableBytes"},{"type":"text","text":" of writable bytes available."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer":{"role":"symbol","title":"ByteBuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/sotocore\/bytebuffer"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"role":"symbol","title":"reserveCapacity(minimumWritableBytes:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/reservecapacity(minimumwritablebytes:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/discardReadBytes()":{"role":"symbol","title":"discardReadBytes()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardReadBytes"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" after the call returns."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/discardReadBytes()","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/discardreadbytes()"},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"role":"symbol","title":"withUnsafeMutableReadableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/withunsafemutablereadablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/readableBytes":{"role":"symbol","title":"readableBytes","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"readableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The number of bytes readable ("},{"type":"codeVoice","code":"readableBytes"},{"type":"text","text":" = "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":")."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/readableBytes","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/readablebytes"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/clear(minimumCapacity:)-12w71":{"role":"symbol","title":"clear(minimumCapacity:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/clear(minimumCapacity:)-12w71","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/clear(minimumcapacity:)-12w71"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"role":"symbol","title":"withUnsafeMutableWritableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableWritableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Yields the bytes currently writable ("},{"type":"codeVoice","code":"bytesWritable"},{"type":"text","text":" = "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" - "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"type":"text","text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/withunsafemutablewritablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/getSlice(at:length:)":{"role":"symbol","title":"getSlice(at:length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getSlice"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"type":"codeVoice","code":"index"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" of the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"0"},{"type":"text","text":", the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"length"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/getSlice(at:length:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/getslice(at:length:)"},"doc://codes.soto.soto-core/documentation/SotoCore/TimeAmount":{"role":"symbol","title":"TimeAmount","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"abstract":[{"type":"text","text":"Represents a time "},{"type":"emphasis","inlineContent":[{"type":"text","text":"interval"}]},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/TimeAmount","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"url":"\/documentation\/sotocore\/timeamount"},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/clear(minimumCapacity:)-7qskn":{"role":"symbol","title":"clear(minimumCapacity:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/clear(minimumCapacity:)-7qskn","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/sotocore\/bytebuffer\/clear(minimumcapacity:)-7qskn"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBufferAllocator":{"role":"symbol","title":"ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBufferAllocator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"url":"\/documentation\/sotocore\/bytebufferallocator"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/withUnsafeReadableBytes(_:)":{"role":"symbol","title":"withUnsafeReadableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeReadableBytes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/withunsafereadablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/readerIndex":{"role":"symbol","title":"readerIndex","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerIndex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/readerIndex","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/readerindex"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"role":"symbol","title":"writeWithUnsafeMutableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/sotocore\/bytebuffer\/writewithunsafemutablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/clear()","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/clear()"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/storageCapacity":{"role":"symbol","title":"storageCapacity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"storageCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The current capacity of the underlying storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"type":"text","text":" "},{"type":"text","text":"buffer until new data is written."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/storageCapacity","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/storagecapacity"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/writableBytes":{"role":"symbol","title":"writableBytes","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The number of bytes writable until "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"type":"text","text":" "},{"type":"text","text":"trigger a copy of the bytes."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writableBytes","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/writablebytes"},"doc://codes.soto.soto-core/documentation/SotoCore":{"role":"collection","title":"SotoCore","abstract":[{"type":"text","text":"The core framework for Soto, a Swift SDK for AWS"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore","kind":"symbol","type":"topic","url":"\/documentation\/sotocore"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/reserveCapacity(_:)":{"role":"symbol","title":"reserveCapacity(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reserves enough space to store the specified number of bytes."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/reserveCapacity(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/reservecapacity(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/writerIndex":{"role":"symbol","title":"writerIndex","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerIndex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/writerIndex","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/writerindex"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"role":"symbol","title":"withVeryUnsafeBytesWithStorageManagement(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"See "},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"type":"text","text":" and "},{"type":"codeVoice","code":"withVeryUnsafeBytes"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/withVeryUnsafeBytes(_:)":{"role":"symbol","title":"withVeryUnsafeBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withVeryUnsafeBytes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/withveryunsafebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"role":"symbol","title":"withUnsafeReadableBytesWithStorageManagement(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"type":"codeVoice","code":"Unmanaged"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"role":"symbol","title":"withVeryUnsafeMutableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeMutableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeMutableWritableBytes"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/withveryunsafemutablebytes(_:)"},"doc://codes.soto.soto-core/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/codes.soto.soto-core\/SQ"},"doc://codes.soto.soto-core/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/codes.soto.soto-core\/SH"},"doc://codes.soto.soto-core/documentation/SotoCore/ByteBuffer/asyncSequence(chunkSize:)":{"role":"symbol","title":"asyncSequence(chunkSize:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asyncSequence"},{"kind":"text","text":"("},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ByteBufferAsyncSequence","preciseIdentifier":"s:8SotoCore23ByteBufferAsyncSequenceV"}],"abstract":[],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoCore\/ByteBuffer\/asyncSequence(chunkSize:)","kind":"symbol","type":"topic","url":"\/documentation\/sotocore\/bytebuffer\/asyncsequence(chunksize:)"}}}