{"metadata":{"title":"ByteBuffer","roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"symbolKind":"struct","externalID":"s:7NIOCore10ByteBufferV","modules":[{"name":"SotoSignerV4"}],"role":"symbol"},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"],"anchor":"Instance-Properties","generated":true},{"anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"title":"Instance Methods"}],"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ByteBuffer","kind":"identifier"}],"platforms":["macOS"]}]},{"content":[{"text":"Allocation","type":"heading","anchor":"Allocation","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"allocator.buffer(capacity: desiredCapacity)","type":"codeVoice"},{"text":" to allocate a new ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]},{"level":3,"anchor":"Basic-usage","text":"Basic usage","type":"heading"},{"inlineContent":[{"text":"A variety of types can be read\/written from\/to a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Using Swift’s ","type":"text"},{"type":"codeVoice","code":"extension"},{"type":"text","text":" mechanism you can easily"},{"type":"text","text":" "},{"text":"create ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" support for your own data types. Out of the box, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" supports for example the following"},{"type":"text","text":" "},{"type":"text","text":"types (non-exhaustive list):"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"String","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"StaticString","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s various (unsigned) integer types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Foundation","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Data","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[UInt8]"},{"text":" and generally any ","type":"text"},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" of "},{"type":"codeVoice","code":"UInt8"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The best and easiest way to read and convert "},{"type":"reference","isActive":true,"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"String"},{"type":"text","text":",  "},{"type":"codeVoice","code":"Array<UInt8>"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is by"},{"type":"text","text":" "},{"text":"passing the buffer to an initializer.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"code":["let buf = ...","let myString = String(buffer: buf)"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"text":" provides APIs for reading its contents either sequentially (","type":"text"},{"type":"codeVoice","code":"read*"},{"text":" methods) or randomly (","type":"text"},{"code":"get*","type":"codeVoice"},{"text":" ","type":"text"},{"text":"methods). All ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bytes of the buffer, i.e. "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to loop over all the bytes in the buffer, you can use the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" conformance with "},{"code":"readableBytesView","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":null,"type":"codeListing","code":["for byte in buffer.readableBytesView {","    print(byte)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential "},{"type":"codeVoice","code":"read*"},{"text":" methods:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"]},{"text":"Random Access","level":3,"type":"heading","anchor":"Random-Access"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" usually contains two methods for random access:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"get<Type>(at: Int, length: Int)","type":"codeVoice"},{"type":"text","text":" where "},{"type":"codeVoice","code":"<type>"},{"type":"text","text":" is for example "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"code":"Data","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"text":" (for ","type":"text"},{"type":"codeVoice","code":"[UInt8]"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"set<Type>(at: Int)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"type":"codeListing"},{"inlineContent":[{"text":"If needed, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"code":"set","type":"codeVoice"},{"text":" request.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" with "},{"code":"get*(at: index)","type":"codeVoice"},{"type":"text","text":" methods, make sure that the"},{"type":"text","text":" "},{"code":"index","type":"codeVoice"},{"text":" you’re passing in is within the readable bytes range. If you try to access an index outside","type":"text"},{"text":" ","type":"text"},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"text":" range, ","type":"text"},{"code":"get*","type":"codeVoice"},{"type":"text","text":" methods will return "},{"code":"nil","type":"codeVoice"},{"text":". For most applications, initializing","type":"text"},{"type":"text","text":" "},{"text":"the desired type with the contents of the buffer, or using one of the ","type":"text"},{"type":"codeVoice","code":"read*"},{"type":"text","text":" is a better approach."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"type":"heading","text":"Sequential Access","level":3,"anchor":"Sequential-Access"},{"inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"text":", the index of the next readable byte","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"text":", the index of the next byte to write","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" usually contains two methods for sequential access:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"text":" to read ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" bytes from the current ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" (and then advance the reader"},{"type":"text","text":" "},{"type":"text","text":"index by "},{"code":"length","type":"codeVoice"},{"text":" bytes)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"text":" to write, advancing the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" by the appropriate amount","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"type":"codeListing"},{"anchor":"Layout","text":"Layout","type":"heading","level":3},{"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"text":" ","type":"text"},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"type":"codeVoice","code":"read<Type>"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"write<Type>"},{"text":"). Getting ","type":"text"},{"type":"codeVoice","code":"writableBytes"},{"text":" (bytes beyond the writer index) is undefined","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" initialised).","type":"text"}]},{"type":"heading","level":3,"anchor":"Slicing","text":"Slicing"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" supports slicing a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" without copying the underlying storage."}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/sotosignerv4\/bytebuffer"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","role":"symbol","title":"withVeryUnsafeMutableBytes(_:)","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". It’s marked as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"very unsafe","type":"text"}]},{"text":" because it might contain","type":"text"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"type":"codeVoice","code":"withUnsafeMutableWritableBytes"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","type":"unresolvable","title":"Swift.CustomDebugStringConvertible"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"title":"shrinkBufferCapacity(to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"shrinkBufferCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","type":"topic","role":"symbol","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will successfully be shrunk if the requested capacity is less than the current capacity,"},{"type":"text","text":" "},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"type":"text","text":" "},{"type":"text","text":"If either condition is not true, the buffer will not be shrunk."}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"title":"getSlice(at:length:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getSlice"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"code":"index","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" this is invoked on and the","type":"text"},{"text":" ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" returned will share the same underlying storage. However, the byte at ","type":"text"},{"type":"codeVoice","code":"index"},{"text":" in this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"will correspond to index ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" of the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"0"},{"text":", the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" will be ","type":"text"},{"type":"codeVoice","code":"length"},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","kind":"symbol","role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"title":"withUnsafeMutableWritableBytes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableWritableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","type":"topic","abstract":[{"type":"text","text":"Yields the bytes currently writable ("},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"capacity"},{"text":" - ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"kind":"symbol","title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", (","kind":"text"},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"abstract":[{"text":"This vends a pointer of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" at the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" after ensuring that the buffer has at least "},{"code":"minimumWritableBytes","type":"codeVoice"},{"type":"text","text":" of writable bytes available."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"storageCapacity"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"abstract":[{"text":"The current capacity of the underlying storage of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original","type":"text"},{"text":" ","type":"text"},{"text":"buffer until new data is written.","type":"text"}],"type":"topic","kind":"symbol","title":"storageCapacity","url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"title":"writeWithUnsafeMutableBytes(_:)","abstract":[],"deprecated":true,"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"text":"((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71","type":"topic","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"for a new use-case."}],"kind":"symbol","title":"clear(minimumCapacity:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","title":"clear(minimumCapacity:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"kind":"text","text":"("},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":")","kind":"text"}],"deprecated":true,"type":"topic","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","kind":"symbol","abstract":[{"text":"Yields a mutable buffer pointer containing this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"title":"withUnsafeMutableReadableBytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"title":"ByteBuffer","kind":"symbol","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/sotosignerv4\/bytebuffer","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},"doc://codes.soto.soto-core/Se":{"title":"Swift.Decodable","type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/Se"},"doc://codes.soto.soto-core/SE":{"title":"Swift.Encodable","type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SE"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"kind":"symbol","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","abstract":[{"text":"Discard the bytes before the reader index. The byte at index ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"text":" before calling this method will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at index "},{"type":"codeVoice","code":"0"},{"text":" after the call returns.","type":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"discardReadBytes"},{"text":"() -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"title":"discardReadBytes()","role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"role":"symbol","title":"clear()","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"type":"text","text":" "},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}]},"doc://codes.soto.soto-core/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SH"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"title":"readerIndex","abstract":[{"text":"The reader index or the number of bytes previously read from this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"text":"newly allocated ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"readerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"title":"reserveCapacity(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","type":"topic","role":"symbol","abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SQ","title":"Swift.Equatable"},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"writerIndex"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","type":"topic","title":"writerIndex","abstract":[{"text":"The write index or the number of bytes previously written to this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"title":"withVeryUnsafeBytesWithStorageManagement(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withVeryUnsafeBytesWithStorageManagement"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"kind":"text","text":", "},{"text":"Unmanaged","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV"},{"kind":"text","text":"<"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"See "},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"type":"text","text":" and "},{"type":"codeVoice","code":"withVeryUnsafeBytes"},{"type":"text","text":"."}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","kind":"symbol","role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)","abstract":[{"text":"Reserves enough space to write at least the specified number of bytes.","type":"text"}],"title":"reserveCapacity(minimumWritableBytes:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reserveCapacity","kind":"identifier"},{"kind":"text","text":"("},{"text":"minimumWritableBytes","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"title":"withUnsafeReadableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","type":"topic","role":"symbol","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":"’s readable bytes.","type":"text"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"text":"Unmanaged","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","role":"symbol","title":"withUnsafeReadableBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"text":"even after the closure returned iff you model the lifetime of those bytes correctly using the ","type":"text"},{"type":"codeVoice","code":"Unmanaged"},{"text":" ","type":"text"},{"text":"instance. If you don’t require the pointer after the closure returns, use ","type":"text"},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". It’s marked as "},{"inlineContent":[{"type":"text","text":"very unsafe"}],"type":"emphasis"},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","title":"withVeryUnsafeBytes(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withVeryUnsafeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"abstract":[{"text":"The number of bytes writable until ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will need to grow its underlying storage which will likely","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"trigger a copy of the bytes."}],"type":"topic","role":"symbol","title":"writableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"writableBytes"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"readableBytes"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"role":"symbol","title":"readableBytes","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","abstract":[{"type":"text","text":"The number of bytes readable ("},{"type":"codeVoice","code":"readableBytes"},{"type":"text","text":" = "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"text":").","type":"text"}],"type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"kind":"symbol","title":"SotoSignerV4","type":"topic","abstract":[{"text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers.","type":"text"}],"role":"collection","url":"\/documentation\/sotosignerv4","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"},"doc://codes.soto.soto-core/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP","title":"Swift.Sendable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"capacity"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","type":"topic","title":"capacity","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":", this is not constant and does "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" signify the number"},{"type":"text","text":" "},{"text":"of bytes that have been written to this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}]}}}