{"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sotosignerv4\/bytebuffer"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":3,"text":"Allocation","anchor":"Allocation","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"allocator.buffer(capacity: desiredCapacity)","type":"codeVoice"},{"type":"text","text":" to allocate a new "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","anchor":"Basic-usage","level":3,"text":"Basic usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Using Swift’s ","type":"text"},{"type":"codeVoice","code":"extension"},{"text":" mechanism you can easily","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"create "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" support for your own data types. Out of the box, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports for example the following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"types (non-exhaustive list):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"text":"\/","type":"text"},{"code":"StaticString","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s various (unsigned) integer types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Foundation"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Data"}]}]},{"content":[{"inlineContent":[{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":" and generally any "},{"type":"codeVoice","code":"Collection"},{"text":" of ","type":"text"},{"type":"codeVoice","code":"UInt8"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The best and easiest way to read and convert ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":",  ","type":"text"},{"type":"codeVoice","code":"Array<UInt8>"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" is by","type":"text"},{"type":"text","text":" "},{"text":"passing the buffer to an initializer.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":["let buf = ...","let myString = String(buffer: buf)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" provides APIs for reading its contents either sequentially ("},{"type":"codeVoice","code":"read*"},{"type":"text","text":" methods) or randomly ("},{"code":"get*","type":"codeVoice"},{"type":"text","text":" "},{"text":"methods). All ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable"},{"type":"text","text":" "},{"text":"bytes of the buffer, i.e. ","type":"text"},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"If you need to loop over all the bytes in the buffer, you can use the ","type":"text"},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" conformance with "},{"code":"readableBytesView","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["for byte in buffer.readableBytesView {","    print(byte)","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential "},{"code":"read*","type":"codeVoice"},{"text":" methods:","type":"text"}]},{"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"],"type":"codeListing","syntax":null},{"text":"Random Access","level":3,"type":"heading","anchor":"Random-Access"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for random access:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"get<Type>(at: Int, length: Int)"},{"type":"text","text":" where "},{"type":"codeVoice","code":"<type>"},{"type":"text","text":" is for example "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", "},{"code":"Bytes","type":"codeVoice"},{"text":" (for ","type":"text"},{"type":"codeVoice","code":"[UInt8]"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"set<Type>(at: Int)","type":"codeVoice"}]}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"]},{"inlineContent":[{"text":"If needed, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"code":"set","type":"codeVoice"},{"text":" request.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"get*(at: index)"},{"type":"text","text":" methods, make sure that the"},{"type":"text","text":" "},{"type":"codeVoice","code":"index"},{"text":" you’re passing in is within the readable bytes range. If you try to access an index outside","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"text":" range, ","type":"text"},{"type":"codeVoice","code":"get*"},{"text":" methods will return ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":". For most applications, initializing"},{"text":" ","type":"text"},{"type":"text","text":"the desired type with the contents of the buffer, or using one of the "},{"type":"codeVoice","code":"read*"},{"type":"text","text":" is a better approach."}]}]},{"anchor":"Sequential-Access","level":3,"type":"heading","text":"Sequential Access"},{"inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to support sequential access:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"text":", the index of the next readable byte","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"writerIndex","type":"codeVoice"},{"text":", the index of the next byte to write","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for sequential access:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"text":" to read ","type":"text"},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes from the current "},{"code":"readerIndex","type":"codeVoice"},{"text":" (and then advance the reader","type":"text"},{"type":"text","text":" "},{"type":"text","text":"index by "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes)"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"type":"text","text":" to write, advancing the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" by the appropriate amount"}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"Layout","text":"Layout"},{"syntax":null,"type":"codeListing","code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"type":"text","text":" "},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"text":" ","type":"text"},{"type":"text","text":"access interface ("},{"code":"read<Type>","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"write<Type>"},{"type":"text","text":"). Getting "},{"code":"writableBytes","type":"codeVoice"},{"text":" (bytes beyond the writer index) is undefined","type":"text"},{"type":"text","text":" "},{"text":"behaviour and might yield arbitrary bytes (","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" "},{"code":"0","type":"codeVoice"},{"type":"text","text":" initialised)."}]},{"text":"Slicing","anchor":"Slicing","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" supports slicing a "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" without copying the underlying storage.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"]}]}],"metadata":{"modules":[{"name":"SotoSignerV4"}],"symbolKind":"struct","roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ByteBuffer","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"title":"ByteBuffer","externalID":"s:7NIOCore10ByteBufferV"},"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"topicSections":[{"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"],"generated":true,"title":"Instance Properties","anchor":"Instance-Properties"},{"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"title":"Conforms To","type":"conformsTo"}],"references":{"doc://codes.soto.soto-core/SH":{"identifier":"doc:\/\/codes.soto.soto-core\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"kind":"symbol","abstract":[{"text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4","role":"collection","url":"\/documentation\/sotosignerv4","title":"SotoSignerV4","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","abstract":[],"deprecated":true,"role":"symbol","title":"writeWithUnsafeMutableBytes(_:)","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)"},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","abstract":[{"text":"The write index or the number of bytes previously written to this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"title":"writerIndex","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"writerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withVeryUnsafeBytes"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"role":"symbol","title":"withVeryUnsafeBytes(_:)","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableReadableBytes","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","kind":"symbol","type":"topic","abstract":[{"text":"Yields a mutable buffer pointer containing this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"title":"withUnsafeMutableReadableBytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"abstract":[{"type":"text","text":"The number of bytes writable until "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"type":"text","text":" "},{"text":"trigger a copy of the bytes.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"kind":"symbol","title":"writableBytes","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"title":"withVeryUnsafeMutableBytes(_:)","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"code":"ByteBuffer","type":"codeVoice"},{"text":". It’s marked as ","type":"text"},{"inlineContent":[{"text":"very unsafe","type":"text"}],"type":"emphasis"},{"type":"text","text":" because it might contain"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeMutableWritableBytes","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeMutableBytes"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","title":"withVeryUnsafeBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"See "},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"text":" and ","type":"text"},{"code":"withVeryUnsafeBytes","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withVeryUnsafeBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s9UnmanagedV","kind":"typeIdentifier","text":"Unmanaged"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier","text":"AnyObject"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"discardReadBytes","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"type":"codeVoice","code":"readerIndex"},{"text":" before calling this method will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at index "},{"type":"codeVoice","code":"0"},{"text":" after the call returns.","type":"text"}],"role":"symbol","title":"discardReadBytes()","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"title":"getSlice(at:length:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","kind":"symbol","abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"code":"index","type":"codeVoice"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"text":"will correspond to index ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" in the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" of the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"0","type":"codeVoice"},{"text":", the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" will be ","type":"text"},{"code":"length","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"length"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":"?"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"capacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"role":"symbol","title":"capacity","abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":", this is not constant and does ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" signify the number"},{"type":"text","text":" "},{"text":"of bytes that have been written to this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)","abstract":[{"type":"text","text":"The "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will successfully be shrunk if the requested capacity is less than the current capacity,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"type":"text","text":" "},{"type":"text","text":"If either condition is not true, the buffer will not be shrunk."}],"title":"shrinkBufferCapacity(to:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"shrinkBufferCapacity","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"code":"ByteBuffer","type":"codeVoice"},{"text":". ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"text":"newly allocated ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"kind":"symbol","title":"readerIndex","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SQ","title":"Swift.Equatable"},"doc://codes.soto.soto-core/SE":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SE","title":"Swift.Encodable"},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"text":"‘s readable bytes. You may hold a pointer to those bytes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"code":"Unmanaged","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"type":"text","text":"."}],"title":"withUnsafeReadableBytesWithStorageManagement(_:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeReadableBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"text":"Unmanaged","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytes","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","title":"withUnsafeReadableBytes(_:)","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","deprecated":true,"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"title":"clear(minimumCapacity:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumCapacity"},{"text":": ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":")"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reserveCapacity"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"role":"symbol","title":"reserveCapacity(minimumWritableBytes:)","abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"type":"topic","title":"ByteBuffer","role":"symbol","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer"},"doc://codes.soto.soto-core/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storageCapacity","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"role":"symbol","title":"storageCapacity","abstract":[{"type":"text","text":"The current capacity of the underlying storage of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original","type":"text"},{"type":"text","text":" "},{"text":"buffer until new data is written.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","abstract":[{"type":"text","text":"Yields the bytes currently writable ("},{"code":"bytesWritable","type":"codeVoice"},{"type":"text","text":" = "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" - "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"type":"text","text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged."}],"title":"withUnsafeMutableWritableBytes(_:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","abstract":[{"text":"This vends a pointer of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" at the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" after ensuring that the buffer has at least "},{"code":"minimumWritableBytes","type":"codeVoice"},{"type":"text","text":" of writable bytes available."}],"title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", (","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","abstract":[{"text":"The number of bytes readable (","type":"text"},{"code":"readableBytes","type":"codeVoice"},{"type":"text","text":" = "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" - "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":")."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readableBytes","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"kind":"symbol","role":"symbol","type":"topic","title":"readableBytes"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"role":"symbol","title":"clear(minimumCapacity:)","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"type":"text","text":"for a new use-case."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","role":"symbol","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"clear","kind":"identifier"},{"kind":"text","text":"()"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()","type":"topic","kind":"symbol"},"doc://codes.soto.soto-core/Se":{"type":"unresolvable","title":"Swift.Decodable","identifier":"doc:\/\/codes.soto.soto-core\/Se"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"role":"symbol","title":"reserveCapacity(_:)","abstract":[{"type":"text","text":"Reserves enough space to store the specified number of bytes."}]}}}