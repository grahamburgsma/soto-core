{"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"text":" ","type":"text"},{"type":"text","text":"more bytes (octets)."}],"relationshipsSections":[{"identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"symbolKind":"struct","roleHeading":"Structure","externalID":"s:7NIOCore10ByteBufferV","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"modules":[{"name":"SotoSignerV4"}],"title":"ByteBuffer"},"topicSections":[{"anchor":"Instance-Properties","generated":true,"title":"Instance Properties","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"]},{"title":"Instance Methods","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"anchor":"Instance-Methods","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sotosignerv4\/bytebuffer"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","text":"Allocation","level":3,"anchor":"Allocation"},{"inlineContent":[{"text":"Use ","type":"text"},{"code":"allocator.buffer(capacity: desiredCapacity)","type":"codeVoice"},{"type":"text","text":" to allocate a new "},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Basic-usage","text":"Basic usage","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Using Swift’s ","type":"text"},{"code":"extension","type":"codeVoice"},{"text":" mechanism you can easily","type":"text"},{"type":"text","text":" "},{"text":"create ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" support for your own data types. Out of the box, "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" supports for example the following","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"types (non-exhaustive list):"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"String","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"StaticString","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Swift’s various (unsigned) integer types","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Foundation"},{"type":"text","text":"’s "},{"code":"Data","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":" and generally any "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" of "},{"code":"UInt8","type":"codeVoice"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"The best and easiest way to read and convert ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"String"},{"type":"text","text":",  "},{"code":"Array<UInt8>","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is by"},{"text":" ","type":"text"},{"type":"text","text":"passing the buffer to an initializer."}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let buf = ...","let myString = String(buffer: buf)"]},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"text":" provides APIs for reading its contents either sequentially (","type":"text"},{"type":"codeVoice","code":"read*"},{"type":"text","text":" methods) or randomly ("},{"type":"codeVoice","code":"get*"},{"type":"text","text":" "},{"text":"methods). All ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"bytes of the buffer, i.e. "},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you need to loop over all the bytes in the buffer, you can use the "},{"code":"Collection","type":"codeVoice"},{"text":" conformance with ","type":"text"},{"type":"codeVoice","code":"readableBytesView"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["for byte in buffer.readableBytesView {","    print(byte)","}"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential "},{"code":"read*","type":"codeVoice"},{"type":"text","text":" methods:"}],"type":"paragraph"},{"syntax":null,"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"],"type":"codeListing"},{"level":3,"text":"Random Access","type":"heading","anchor":"Random-Access"},{"inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for random access:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"get<Type>(at: Int, length: Int)","type":"codeVoice"},{"text":" where ","type":"text"},{"code":"<type>","type":"codeVoice"},{"type":"text","text":" is for example "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"code":"Data","type":"codeVoice"},{"type":"text","text":", "},{"code":"Bytes","type":"codeVoice"},{"type":"text","text":" (for "},{"code":"[UInt8]","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"set<Type>(at: Int)"}]}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed, "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will automatically resize its storage to accommodate your ","type":"text"},{"type":"codeVoice","code":"set"},{"type":"text","text":" request."}]},{"content":[{"inlineContent":[{"type":"text","text":"If you need to access the contents of a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" with "},{"type":"codeVoice","code":"get*(at: index)"},{"type":"text","text":" methods, make sure that the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"index"},{"type":"text","text":" you’re passing in is within the readable bytes range. If you try to access an index outside"},{"type":"text","text":" "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"type":"text","text":" range, "},{"code":"get*","type":"codeVoice"},{"type":"text","text":" methods will return "},{"type":"codeVoice","code":"nil"},{"text":". For most applications, initializing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the desired type with the contents of the buffer, or using one of the "},{"type":"codeVoice","code":"read*"},{"text":" is a better approach.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"text":"Sequential Access","level":3,"type":"heading","anchor":"Sequential-Access"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"text":", the index of the next readable byte","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":", the index of the next byte to write"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For every supported type "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" usually contains two methods for sequential access:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"read<Type>(length: Int)","type":"codeVoice"},{"type":"text","text":" to read "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes from the current "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" (and then advance the reader"},{"type":"text","text":" "},{"type":"text","text":"index by "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"write<Type>(Type)","type":"codeVoice"},{"text":" to write, advancing the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" by the appropriate amount"}]}]}]},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"type":"codeListing","code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"syntax":null},{"level":3,"text":"Layout","type":"heading","anchor":"Layout"},{"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"type":"codeVoice","code":"read<Type>"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"write<Type>"},{"text":"). Getting ","type":"text"},{"code":"writableBytes","type":"codeVoice"},{"text":" (bytes beyond the writer index) is undefined","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" "},{"code":"0","type":"codeVoice"},{"text":" initialised).","type":"text"}]},{"anchor":"Slicing","text":"Slicing","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" supports slicing a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" without copying the underlying storage."}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"]}]}],"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","title":"readerIndex","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","kind":"symbol","abstract":[{"text":"The reader index or the number of bytes previously read from this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". "},{"type":"codeVoice","code":"readerIndex"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"text":" ","type":"text"},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)","role":"symbol","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will successfully be shrunk if the requested capacity is less than the current capacity,"},{"text":" ","type":"text"},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"text":" ","type":"text"},{"type":"text","text":"If either condition is not true, the buffer will not be shrunk."}],"type":"topic","title":"shrinkBufferCapacity(to:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shrinkBufferCapacity"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"title":"reserveCapacity(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)","role":"symbol","abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","type":"topic","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"kind":"symbol","type":"topic","title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"kind":"text","text":"("},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","abstract":[{"type":"text","text":"This vends a pointer of the "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" at the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" after ensuring that the buffer has at least "},{"type":"codeVoice","code":"minimumWritableBytes"},{"type":"text","text":" of writable bytes available."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Yields the bytes currently writable ("},{"type":"codeVoice","code":"bytesWritable"},{"type":"text","text":" = "},{"code":"capacity","type":"codeVoice"},{"type":"text","text":" - "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","title":"withUnsafeMutableWritableBytes(_:)"},"doc://codes.soto.soto-core/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/codes.soto.soto-core\/SH"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"abstract":[{"type":"text","text":"The current capacity of the underlying storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"type":"text","text":" "},{"type":"text","text":"buffer until new data is written."}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"storageCapacity","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","title":"storageCapacity","kind":"symbol","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","title":"clear(minimumCapacity:)","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"text":"for a new use-case.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","title":"withVeryUnsafeMutableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","kind":"symbol","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". It’s marked as ","type":"text"},{"inlineContent":[{"text":"very unsafe","type":"text"}],"type":"emphasis"},{"text":" because it might contain","type":"text"},{"type":"text","text":" "},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeMutableWritableBytes","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic"},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/codes.soto.soto-core\/SQ"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"kind":"symbol","type":"topic","title":"getSlice(at:length:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getSlice"},{"kind":"text","text":"("},{"text":"at","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":"?"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"code":"index","type":"codeVoice"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on and the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"text":" in this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"will correspond to index ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"text":" of the returned ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will be ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":", the "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"length","type":"codeVoice"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear(minimumCapacity:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":")","kind":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","deprecated":true,"type":"topic","role":"symbol","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"discardReadBytes"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","abstract":[{"text":"Discard the bytes before the reader index. The byte at index ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"text":" before calling this method will be","type":"text"},{"type":"text","text":" "},{"text":"at index ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" after the call returns.","type":"text"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()","title":"discardReadBytes()"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"type":"topic","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"type":"text","text":" "},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear()","role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"kind":"symbol","type":"topic","title":"withUnsafeReadableBytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"title":"withUnsafeMutableReadableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","type":"topic","role":"symbol","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"kind":"symbol","type":"topic","title":"capacity","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"capacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","abstract":[{"text":"The current capacity of the storage of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", this is not constant and does ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" signify the number"},{"type":"text","text":" "},{"text":"of bytes that have been written to this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"url":"\/documentation\/sotosignerv4\/bytebuffer","role":"symbol","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"text":" ","type":"text"},{"type":"text","text":"more bytes (octets)."}],"type":"topic","title":"ByteBuffer","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol"},"doc://codes.soto.soto-core/Se":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/Se","title":"Swift.Decodable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"kind":"symbol","type":"topic","title":"withVeryUnsafeBytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytes"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"code":"ByteBuffer","type":"codeVoice"},{"text":". It’s marked as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"kind":"symbol","type":"topic","title":"writerIndex","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"writerIndex","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","abstract":[{"text":"The write index or the number of bytes previously written to this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"text":" ","type":"text"},{"text":"newly allocated ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"type":"topic","url":"\/documentation\/sotosignerv4","title":"SotoSignerV4","abstract":[{"text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4","kind":"symbol","role":"collection"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","role":"symbol","title":"withVeryUnsafeBytesWithStorageManagement(_:)","type":"topic","abstract":[{"text":"See ","type":"text"},{"code":"withUnsafeReadableBytesWithStorageManagement","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"withVeryUnsafeBytes"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytesWithStorageManagement","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV","text":"Unmanaged"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta","text":"AnyObject"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}]},"doc://codes.soto.soto-core/SE":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SE","title":"Swift.Encodable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"kind":"symbol","type":"topic","title":"reserveCapacity(minimumWritableBytes:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"text":"minimumWritableBytes","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)","abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"type":"codeVoice","code":"Unmanaged"},{"text":" ","type":"text"},{"text":"instance. If you don’t require the pointer after the closure returns, use ","type":"text"},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"text":".","type":"text"}],"title":"withUnsafeReadableBytesWithStorageManagement(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeReadableBytesWithStorageManagement"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","type":"topic","role":"symbol","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","type":"topic","abstract":[{"type":"text","text":"The number of bytes writable until "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will need to grow its underlying storage which will likely","type":"text"},{"type":"text","text":" "},{"type":"text","text":"trigger a copy of the bytes."}],"title":"writableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"writableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/s8SendableP":{"identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"abstract":[{"text":"The number of bytes readable (","type":"text"},{"code":"readableBytes","type":"codeVoice"},{"text":" = ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":")."}],"title":"readableBytes","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readableBytes","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","type":"topic","role":"symbol","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"kind":"symbol","type":"topic","title":"writeWithUnsafeMutableBytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"deprecated":true,"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","abstract":[]}}}