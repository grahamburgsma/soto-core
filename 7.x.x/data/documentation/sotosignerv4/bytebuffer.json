{"identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"sections":[],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"modules":[{"name":"SotoSignerV4"}],"title":"ByteBuffer","symbolKind":"struct","externalID":"s:7NIOCore10ByteBufferV","roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Allocation","type":"heading","level":3,"anchor":"Allocation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"allocator.buffer(capacity: desiredCapacity)","type":"codeVoice"},{"text":" to allocate a new ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},{"type":"heading","anchor":"Basic-usage","text":"Basic usage","level":3},{"type":"paragraph","inlineContent":[{"text":"A variety of types can be read\/written from\/to a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". Using Swift’s ","type":"text"},{"code":"extension","type":"codeVoice"},{"type":"text","text":" mechanism you can easily"},{"text":" ","type":"text"},{"text":"create ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" support for your own data types. Out of the box, ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" supports for example the following"},{"text":" ","type":"text"},{"text":"types (non-exhaustive list):","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"StaticString"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s various (unsigned) integer types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Foundation","type":"codeVoice"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"[UInt8]","type":"codeVoice"},{"text":" and generally any ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" of ","type":"text"},{"type":"codeVoice","code":"UInt8"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The best and easiest way to read and convert "},{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","isActive":true,"type":"reference"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"String"},{"type":"text","text":",  "},{"code":"Array<UInt8>","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is by"},{"text":" ","type":"text"},{"type":"text","text":"passing the buffer to an initializer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["let buf = ...","let myString = String(buffer: buf)"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" provides APIs for reading its contents either sequentially ("},{"type":"codeVoice","code":"read*"},{"text":" methods) or randomly (","type":"text"},{"code":"get*","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"methods). All "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"bytes of the buffer, i.e. "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to loop over all the bytes in the buffer, you can use the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" conformance with "},{"type":"codeVoice","code":"readableBytesView"},{"text":":","type":"text"}]},{"syntax":null,"code":["for byte in buffer.readableBytesView {","    print(byte)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential "},{"type":"codeVoice","code":"read*"},{"type":"text","text":" methods:"}]},{"type":"codeListing","syntax":null,"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"]},{"level":3,"text":"Random Access","type":"heading","anchor":"Random-Access"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for random access:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"code":"get<Type>(at: Int, length: Int)","type":"codeVoice"},{"type":"text","text":" where "},{"type":"codeVoice","code":"<type>"},{"type":"text","text":" is for example "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" (for "},{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"set<Type>(at: Int)"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"If needed, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will automatically resize its storage to accommodate your ","type":"text"},{"type":"codeVoice","code":"set"},{"type":"text","text":" request."}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"get*(at: index)"},{"text":" methods, make sure that the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"index"},{"text":" you’re passing in is within the readable bytes range. If you try to access an index outside","type":"text"},{"text":" ","type":"text"},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"type":"text","text":" range, "},{"code":"get*","type":"codeVoice"},{"type":"text","text":" methods will return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". For most applications, initializing"},{"type":"text","text":" "},{"type":"text","text":"the desired type with the contents of the buffer, or using one of the "},{"type":"codeVoice","code":"read*"},{"type":"text","text":" is a better approach."}]}]},{"type":"heading","text":"Sequential Access","anchor":"Sequential-Access","level":3},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" provides two properties which are indices into the "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":", the index of the next readable byte"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":", the index of the next byte to write"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" usually contains two methods for sequential access:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"read<Type>(length: Int)","type":"codeVoice"},{"type":"text","text":" to read "},{"type":"codeVoice","code":"length"},{"text":" bytes from the current ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" (and then advance the reader"},{"type":"text","text":" "},{"text":"index by ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" bytes)","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"write<Type>(Type)","type":"codeVoice"},{"text":" to write, advancing the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" by the appropriate amount","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"]},{"type":"heading","text":"Layout","anchor":"Layout","level":3},{"syntax":null,"type":"codeListing","code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"type":"text","text":" "},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"text":" ","type":"text"},{"text":"access interface (","type":"text"},{"type":"codeVoice","code":"read<Type>"},{"type":"text","text":"\/"},{"code":"write<Type>","type":"codeVoice"},{"text":"). Getting ","type":"text"},{"code":"writableBytes","type":"codeVoice"},{"text":" (bytes beyond the writer index) is undefined","type":"text"},{"type":"text","text":" "},{"text":"behaviour and might yield arbitrary bytes (","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" "},{"code":"0","type":"codeVoice"},{"text":" initialised).","type":"text"}]},{"anchor":"Slicing","text":"Slicing","level":3,"type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports slicing a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" without copying the underlying storage."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"type":"codeListing","code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"],"syntax":null}]}],"topicSections":[{"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"],"generated":true},{"title":"Instance Methods","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"anchor":"Instance-Methods"}],"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sotosignerv4\/bytebuffer"]}],"relationshipsSections":[{"identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"text":" ","type":"text"},{"type":"text","text":"more bytes (octets)."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"title":"ByteBuffer","url":"\/documentation\/sotosignerv4\/bytebuffer","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"type":"topic","title":"withUnsafeReadableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4","kind":"symbol","type":"topic","abstract":[{"text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers.","type":"text"}],"title":"SotoSignerV4","url":"\/documentation\/sotosignerv4","role":"collection"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SQ","title":"Swift.Equatable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"type":"topic","title":"withVeryUnsafeMutableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"inlineContent":[{"text":"very unsafe","type":"text"}],"type":"emphasis"},{"type":"text","text":" because it might contain"},{"text":" ","type":"text"},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeMutableWritableBytes"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","type":"topic","abstract":[{"text":"Returns a slice of size ","type":"text"},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"type":"codeVoice","code":"index"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" this is invoked on and the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"code":"0","type":"codeVoice"},{"text":" in the returned ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" of the returned ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will be ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" will be ","type":"text"},{"code":"length","type":"codeVoice"},{"type":"text","text":"."}],"title":"getSlice(at:length:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"type":"topic","title":"readerIndex","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":". ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"text":" for a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","type":"topic","abstract":[{"text":"Reserves enough space to write at least the specified number of bytes.","type":"text"}],"title":"reserveCapacity(minimumWritableBytes:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"type":"topic","title":"withVeryUnsafeBytesWithStorageManagement(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withVeryUnsafeBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"kind":"text","text":", "},{"text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier","text":"AnyObject"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","abstract":[{"text":"See ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"withVeryUnsafeBytes"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/Se":{"identifier":"doc:\/\/codes.soto.soto-core\/Se","title":"Swift.Decodable","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"type":"topic","title":"writeWithUnsafeMutableBytes(_:)","deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"((","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","abstract":[]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","abstract":[{"text":"This vends a pointer of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" at the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" after ensuring that the buffer has at least "},{"code":"minimumWritableBytes","type":"codeVoice"},{"type":"text","text":" of writable bytes available."}],"title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"storageCapacity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","type":"topic","abstract":[{"text":"The current capacity of the underlying storage of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"text":" ","type":"text"},{"text":"buffer until new data is written.","type":"text"}],"title":"storageCapacity","url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"type":"topic","title":"withVeryUnsafeBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"inlineContent":[{"type":"text","text":"very unsafe"}],"type":"emphasis"},{"type":"text","text":" because it might contain"},{"text":" ","type":"text"},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeMutableWritableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"title":"withUnsafeMutableWritableBytes(_:)","type":"topic","kind":"symbol","abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"code":"capacity","type":"codeVoice"},{"type":"text","text":" - "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"writableBytes"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","type":"topic","abstract":[{"text":"The number of bytes writable until ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"text":" ","type":"text"},{"type":"text","text":"trigger a copy of the bytes."}],"title":"writableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"code":"Unmanaged","type":"codeVoice"},{"text":" ","type":"text"},{"text":"instance. If you don’t require the pointer after the closure returns, use ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeReadableBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"withUnsafeReadableBytesWithStorageManagement(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"type":"topic","title":"clear(minimumCapacity:)","deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":")"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"text":"for a new use-case.","type":"text"}]},"doc://codes.soto.soto-core/SH":{"identifier":"doc:\/\/codes.soto.soto-core\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"type":"topic","title":"withUnsafeMutableReadableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableReadableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","abstract":[{"text":"Yields a mutable buffer pointer containing this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}]},"doc://codes.soto.soto-core/SE":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SE","title":"Swift.Encodable"},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":", this is not constant and does ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" signify the number"},{"text":" ","type":"text"},{"text":"of bytes that have been written to this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"capacity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"kind":"symbol","title":"capacity","url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":". ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"text":"newly allocated ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","type":"topic","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","kind":"symbol","title":"writerIndex","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"writerIndex","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","type":"topic","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear(minimumCapacity:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71"},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"discardReadBytes"},{"text":"() -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","type":"topic","abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"code":"0","type":"codeVoice"},{"text":" after the call returns.","type":"text"}],"title":"discardReadBytes()","url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()"},"doc://codes.soto.soto-core/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"readableBytes"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","type":"topic","abstract":[{"text":"The number of bytes readable (","type":"text"},{"code":"readableBytes","type":"codeVoice"},{"type":"text","text":" = "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":")."}],"title":"readableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","type":"topic","title":"reserveCapacity(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reserveCapacity","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"role":"symbol","abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"type":"topic","title":"clear()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}]}}}